
--
-- This currently does tests for dark mode only
--

insulate("Play On Click", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        it("change theme from light to dark", function()
            dermaBase.painter:change_theme(false)
            dermaBase.painter:update_colors()
            assert.same(dermaBase.painter.colors.bg, color_light.bg)
            assert.same(dermaBase.painter.colors.bghover, color_light.bghover)
            assert.same(dermaBase.painter.colors.text, color_light.text)
            assert.same(dermaBase.painter.colors.bglist, color_light.bglist)
            assert.same(dermaBase.painter.colors.slider, color_light.slider)

            dermaBase.painter:change_theme(true)
            dermaBase.painter:update_colors()
            assert.same(dermaBase.painter.colors.bg, color_dark.bg)
            assert.same(dermaBase.painter.colors.bghover, color_dark.bghover)
            assert.same(dermaBase.painter.colors.text, color_dark.text)
            assert.same(dermaBase.painter.colors.bglist, color_dark.bglist)
            assert.same(dermaBase.painter.colors.slider, color_dark.slider)
        end)
        it("is playing", function()
            dermaBase.buttonplay:DoClick(nil, song_line)
            assert.is_false(media.cl_PlayingSong.isPaused)
            assert.is_false(media.cl_PlayingSong.isStopped)
            assert.is_false(media.cl_PlayingSong.isLooped)
        end)
        it("update media data", function()
            assert.same(media.cl_PlayingSong.title_song, "Example2")
            assert.same(media.cl_PlayingSong.song,
                "sound/folder1/Example2.mp3")
            assert.same(media.cl_PlayingSong.title_status, " Playing: ")
        end)
        it("update derma ui", function()
            assert.ui_is_playing("Example2")
            assert.same(dermaBase.contextmedia:IsMissing(), false)
        end)
        it("song list highlight line", function()
            assert.line_highlight_play(media.cl_PlayingSong, song_line, 0)
        end)
    end)
end)

insulate("Play after play", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        describe("play another", function()
            it("is playing", function()
                song_line = 1
                dermaBase.buttonplay:DoClick(nil, song_line)
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example1")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example1.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Playing: ")
            end)
            it("update derma ui", function()
                assert.ui_is_playing("Example1")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_play(media.cl_PlayingSong, song_line, 2)
            end)
        end)
    end)
end)

insulate("Play after pause", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonpause:DoClick()
        describe("resume", function()
            it("is playing", function()
                dermaBase.buttonplay:DoClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Playing: ")
            end)
            it("update derma ui", function()
                assert.ui_is_playing("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_play(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Stop after play", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        describe("stop", function()
            it("is stopped", function()
                dermaBase.buttonstop:DoClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_true(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("reset ui", function()
                assert.same(media.cl_PlayingSong.title_song, 0)
                assert.same(media.cl_PlayingSong.song, "")
                assert.same(media.cl_PlayingSong.title_status, "")
            end)
            it("update derma ui", function()
                assert.ui_is_stopped(" gMusic Player")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list dont highlight line", function()
                assert.line_highlight_stop(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Pause after play", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        describe("pause", function()
            it("is paused", function()
                dermaBase.buttonpause:DoClick()
                assert.is_true(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(media.cl_PlayingSong.song,
                    "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Paused: ")
            end)
            it("update derma ui", function()
                assert.ui_is_paused("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_pause(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Unpause after pause", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & pause", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonpause:DoClick()
        describe("unpause", function()
            it("is playing", function()
                dermaBase.buttonpause:DoClick(nil, song_line)
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Playing: ")
            end)
            it("update derma ui", function()
                assert.ui_is_playing("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_play(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Stop after pause", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & pause", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonpause:DoClick()
        describe("stop", function()
            it("is stopped", function()
                dermaBase.buttonstop:DoClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_true(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("reset ui", function()
                assert.same(media.cl_PlayingSong.title_song, 0)
                assert.same(media.cl_PlayingSong.song, "")
                assert.same(media.cl_PlayingSong.title_status, "")
            end)
            it("update derma ui", function()
                assert.ui_is_stopped(" gMusic Player")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list dont highlight line", function()
                assert.line_highlight_stop(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Stop after unpause", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & pause & unpause", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonpause:DoClick()
        dermaBase.buttonpause:DoClick()
        describe("stop", function()
            it("is stopped", function()
                dermaBase.buttonstop:DoClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_true(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
            end)
            it("reset ui", function()
                assert.same(media.cl_PlayingSong.title_song, 0)
                assert.same(media.cl_PlayingSong.song, "")
                assert.same(media.cl_PlayingSong.title_status, "")
            end)
            it("update derma ui", function()
                assert.ui_is_stopped(" gMusic Player")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list dont highlight line", function()
                assert.line_highlight_stop(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Loop after play", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        describe("loop", function()
            it("is looping", function()
                dermaBase.buttonpause:DoRightClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_true(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Looping: ")
            end)
            it("update derma ui", function()
                assert.ui_is_looped("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_loop(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)


insulate("Pause after loop", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & loop", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonpause:DoRightClick()
        describe("pause", function()
            it("is paused & looped", function()
                dermaBase.buttonpause:DoClick()
                assert.is_true(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_true(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(media.cl_PlayingSong.song,
                    "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Paused: ")
            end)
            it("update derma ui", function()
                assert.ui_is_paused("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_pause(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Unpause after loop & pause", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & loop & pause", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonpause:DoRightClick()
        dermaBase.buttonpause:DoClick()
        describe("unpause", function()
            it("is looping", function()
                dermaBase.buttonpause:DoClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_true(media.cl_PlayingSong.isLooped)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Looping: ")
            end)
            it("update derma ui", function()
                assert.ui_is_looped("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_loop(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Autoplay after play", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        describe("autoplay", function()
            it("is autoplaying", function()
                dermaBase.buttonplay:DoRightClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
                assert.is_true(media.cl_PlayingSong.isAutoPlaying)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example2.mp3")
                assert.same(
                    media.cl_PlayingSong.title_status, " Auto Playing: ")
            end)
            it("update derma ui", function()
                assert.ui_is_autoplay("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_autoplay(
                    media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Pause after autoplay", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & autoplay", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonplay:DoRightClick()
        describe("pause", function()
            it("is paused", function()
                dermaBase.buttonpause:DoClick()
                assert.is_true(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
                assert.is_true(media.cl_PlayingSong.isAutoPlaying)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(media.cl_PlayingSong.song,
                    "sound/folder1/Example2.mp3")
                assert.same(media.cl_PlayingSong.title_status, " Paused: ")
            end)
            it("update derma ui", function()
                assert.ui_is_paused("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_pause(media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)

insulate("Unpause after autoplay & pause", function()
    local dermaBase, media = create_with_dark_mode()
    it("setup assert rules", function()
        assert.set_derma(dermaBase)
    end)
    describe("play & autoplay & pause", function()
        local song_line = 2
        dermaBase.buttonplay:DoClick(nil, song_line)
        dermaBase.buttonplay:DoRightClick()
        dermaBase.buttonpause:DoClick()
        describe("unpause", function()
            it("is playing & autoplayed", function()
                dermaBase.buttonpause:DoClick()
                assert.is_false(media.cl_PlayingSong.isPaused)
                assert.is_false(media.cl_PlayingSong.isStopped)
                assert.is_false(media.cl_PlayingSong.isLooped)
                assert.is_true(media.cl_PlayingSong.isAutoPlaying)
            end)
            it("update media data", function()
                assert.same(media.cl_PlayingSong.title_song, "Example2")
                assert.same(
                    media.cl_PlayingSong.song, "sound/folder1/Example2.mp3")
                assert.same(
                    media.cl_PlayingSong.title_status, " Auto Playing: ")
            end)
            it("update derma ui", function()
                assert.ui_is_autoplay("Example2")
                assert.same(dermaBase.contextmedia:IsMissing(), false)
            end)
            it("song list highlight line", function()
                assert.line_highlight_autoplay(
                    media.cl_PlayingSong, song_line, 0)
            end)
        end)
    end)
end)